/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserAnswerResulArgs } from "./CreateUserAnswerResulArgs";
import { UpdateUserAnswerResulArgs } from "./UpdateUserAnswerResulArgs";
import { DeleteUserAnswerResulArgs } from "./DeleteUserAnswerResulArgs";
import { UserAnswerResulFindManyArgs } from "./UserAnswerResulFindManyArgs";
import { UserAnswerResulFindUniqueArgs } from "./UserAnswerResulFindUniqueArgs";
import { UserAnswerResul } from "./UserAnswerResul";
import { User } from "../../user/base/User";
import { UserAnswerResulService } from "../userAnswerResul.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserAnswerResul)
export class UserAnswerResulResolverBase {
  constructor(
    protected readonly service: UserAnswerResulService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "read",
    possession: "any",
  })
  async _userAnswerResulsMeta(
    @graphql.Args() args: UserAnswerResulFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserAnswerResul])
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "read",
    possession: "any",
  })
  async userAnswerResuls(
    @graphql.Args() args: UserAnswerResulFindManyArgs
  ): Promise<UserAnswerResul[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserAnswerResul, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "read",
    possession: "own",
  })
  async userAnswerResul(
    @graphql.Args() args: UserAnswerResulFindUniqueArgs
  ): Promise<UserAnswerResul | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAnswerResul)
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "create",
    possession: "any",
  })
  async createUserAnswerResul(
    @graphql.Args() args: CreateUserAnswerResulArgs
  ): Promise<UserAnswerResul> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userId: args.data.userId
          ? {
              connect: args.data.userId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAnswerResul)
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "update",
    possession: "any",
  })
  async updateUserAnswerResul(
    @graphql.Args() args: UpdateUserAnswerResulArgs
  ): Promise<UserAnswerResul | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userId: args.data.userId
            ? {
                connect: args.data.userId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAnswerResul)
  @nestAccessControl.UseRoles({
    resource: "UserAnswerResul",
    action: "delete",
    possession: "any",
  })
  async deleteUserAnswerResul(
    @graphql.Args() args: DeleteUserAnswerResulArgs
  ): Promise<UserAnswerResul | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: UserAnswerResul
  ): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
