/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserPointInfoArgs } from "./CreateUserPointInfoArgs";
import { UpdateUserPointInfoArgs } from "./UpdateUserPointInfoArgs";
import { DeleteUserPointInfoArgs } from "./DeleteUserPointInfoArgs";
import { UserPointInfoFindManyArgs } from "./UserPointInfoFindManyArgs";
import { UserPointInfoFindUniqueArgs } from "./UserPointInfoFindUniqueArgs";
import { UserPointInfo } from "./UserPointInfo";
import { User } from "../../user/base/User";
import { UserPointInfoService } from "../userPointInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserPointInfo)
export class UserPointInfoResolverBase {
  constructor(
    protected readonly service: UserPointInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "read",
    possession: "any",
  })
  async _userPointInfosMeta(
    @graphql.Args() args: UserPointInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserPointInfo])
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "read",
    possession: "any",
  })
  async userPointInfos(
    @graphql.Args() args: UserPointInfoFindManyArgs
  ): Promise<UserPointInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserPointInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "read",
    possession: "own",
  })
  async userPointInfo(
    @graphql.Args() args: UserPointInfoFindUniqueArgs
  ): Promise<UserPointInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPointInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "create",
    possession: "any",
  })
  async createUserPointInfo(
    @graphql.Args() args: CreateUserPointInfoArgs
  ): Promise<UserPointInfo> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        userId: args.data.userId
          ? {
              connect: args.data.userId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserPointInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "update",
    possession: "any",
  })
  async updateUserPointInfo(
    @graphql.Args() args: UpdateUserPointInfoArgs
  ): Promise<UserPointInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          userId: args.data.userId
            ? {
                connect: args.data.userId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPointInfo)
  @nestAccessControl.UseRoles({
    resource: "UserPointInfo",
    action: "delete",
    possession: "any",
  })
  async deleteUserPointInfo(
    @graphql.Args() args: DeleteUserPointInfoArgs
  ): Promise<UserPointInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(@graphql.Parent() parent: UserPointInfo): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
